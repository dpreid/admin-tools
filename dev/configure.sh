#!/bin/bash

# tidy up any stale files
rm -rf ./autogenerated
rm -rf ./playbooks

#ignore errors when creating dirs, as they might already exist, although we don't check
mkdir -p autogenerated || true 
mkdir -p book || true
mkdir -p jump || true
mkdir -p logs || true 
mkdir -p playbooks || true

# Edit to suit your instance

# Directory for services secrets (must contain book.pat, jump.pat, project, relay.pat)
export SECRETS=~/secret/app.practable.io/dev
export EXPT_SECRETS=~/secret
export MAIL_SECRET=~/secret/zoho/mail.yaml

export PROJECT=app-practable-io-alpha

# SSH access
export ZONE=europe-west2-c
export INSTANCE=app-practable-io-alpha-dev

# Health check info
export BACKEND_SERVICE=ci-https-redirect-backend-dev

# Networking info for services & ansible nginx conf
export INSTANCE_PATH=dev
# used in nginx configuration & ansible playbook for lets encrypt
export DOMAIN=app.practable.io
# Used in ansible nginx playbook for setting up certbot
export EMAIL=rl.eng@ed.ac.uk
# used in all ansible playbook templates (note usually underscore, not hyphen)
export ANSIBLE_GROUP=app_practable_dev

# Static content: main/default content for the instance ("production" equivalent)
export STATIC_REPO_NAME=static-app-practable-io-dev-default
export STATIC_REPO_URL=https://github.com/practable/static-app-practable-io-dev-default.git
# Note that book is deliberately not included in this list of sub-dirs
export STATIC_SUB_DIRS="['config', 'images', 'info', 'ui']"

# Static content: development versions on same server (TODO improve to let devs be self sufficient)
export DEV_STATIC_REPO_NAME=static-app-practable-io-dev-dev
export DEV_STATIC_REPO_URL=https://github.com/practable/static-app-practable-io-dev-dev.git
# Note that book is deliberately not included in this list of sub-dirs
export DEV_STATIC_SUB_DIRS="['config', 'images', 'info', 'ui']"

# Virtual experiments
export VE_NUM=3
export VE_LIFETIME=604800
export JUMP_BASE_PATH=/api/v1
export BOOK_BASE_PATH=/api/v1
	
###########################################################################
# Do not edit below this line (unless you want a non-standard installation)
###########################################################################

# Do NOT pass and actual secret to a template - instead pass an eval command on a path e.g. `$(cat ${SECRETS}/some_secret.pat)`
# this is to avoid leaking secrets into the git repo if autogenerated files are added inadvertently
# which is possible given that they are deployed into directories for convenience.

export HTTPS_HOST="https://${DOMAIN}/${INSTANCE_PATH}"
export WSS_HOST="wss://${DOMAIN}/${INSTANCE_PATH}"

# create login.sh
envsubst '${INSTANCE} ${PROJECT} ${ZONE}' < ./templates/login.sh.template > ./login.sh
chmod +x ./login.sh

#create health.sh
envsubst '${BACKEND_SERVICE} ${PROJECT}' < ./templates/health.sh.template > ./health.sh
chmod +x ./health.sh

# Create book.service by adding variables to template
export BOOK_PORT=4000
export BOOK_AUDIENCE="${HTTPS_HOST}/book"
export BOOK_SECRET=$(cat ${SECRETS}/book.pat)
export RELAY_SECRET=$(cat  ${SECRETS}/relay.pat)
envsubst < ./templates/book.service.template > ./autogenerated/book.service

# create relay.service by adding variables to template
export RELAY_ALLOW_NO_BOOKING_ID=true
export RELAY_AUDIENCE="${HTTPS_HOST}/access"
export RELAY_PORT_ACCESS=3000
export RELAY_PORT_PROFILE=6061
export RELAY_PORT_RELAY=3001
export RELAY_SECRET=$(cat ${SECRETS}/relay.pat)
export RELAY_URL="${WSS_HOST}/relay"
envsubst < ./templates/relay.service.template > ./autogenerated/relay.service

# create jump.service by adding variables to template
export JUMP_AUDIENCE="${HTTPS_HOST}/jump"
export JUMP_PORT_ACCESS=3002
export JUMP_PORT_RELAY=3003
export JUMP_SECRET=$(cat ${SECRETS}/jump.pat)
export JUMP_URL="${WSS_HOST}/jump"
envsubst < ./templates/jump.service.template > ./autogenerated/jump.service

#create status.service by adding variables to template
set -x
export STATUS_EMAIL_FROM=$(yq -r '.username' $MAIL_SECRET)
export STATUS_EMAIL_HOST=$(yq -r '.host' $MAIL_SECRET)
export STATUS_EMAIL_LINK=$HTTPS_HOST/status
export STATUS_EMAIL_PASSWORD=$(yq -r '.password' $MAIL_SECRET)
export STATUS_EMAIL_PORT=$(yq -r '.port' $MAIL_SECRET)
export STATUS_EMAIL_SUBJECT=$DOMAIN/$INSTANCE_PATH
export STATUS_EMAIL_TO=$(yq -r '.to' $MAIL_SECRET)
set +x
envsubst < ./templates/status.service.template > ./autogenerated/status.service

# create nginx.conf with the ports and routings above
# export vars to avoid $request_uri, $uri etc being replaced with blank
# https://unix.stackexchange.com/questions/294378/replacing-only-specific-variables-with-envsubst
envsubst '${BOOK_PORT} ${DOMAIN} ${HTTPS_HOST} ${INSTANCE_PATH} ${RELAY_PORT_ACCESS} ${RELAY_PORT_RELAY} ${JUMP_PORT_ACCESS} ${JUMP_PORT_RELAY}' < ./templates/nginx.conf.template > ./autogenerated/nginx.conf

# Create a vars file for ansible, so we can refer to the domain as needed.
envsubst '${DOMAIN}  ${INSTANCE_PATH} ${STATIC_REPO_NAME} ${STATIC_REPO_URL} ${STATIC_SUB_DIRS} ${DEV_STATIC_REPO_NAME} ${DEV_STATIC_REPO_URL} ${DEV_STATIC_SUB_DIRS}' < ./templates/vars.yml.template > ./autogenerated/vars.yml

# Populate our playbooks with group name and other variables
export SSL_DOMAIN="${DOMAIN}/${INSTANCE_PATH}"
envsubst '${ANSIBLE_GROUP}' < ./templates/playbook-download-logs.yml.template > ./playbooks/download-logs.yml
envsubst '${ANSIBLE_GROUP}' < ./templates/playbook-install-book.yml.template > ./playbooks/install-book.yml
envsubst '${ANSIBLE_GROUP}' < ./templates/playbook-install-jump.yml.template > ./playbooks/install-jump.yml
envsubst '${ANSIBLE_GROUP} ${SSL_DOMAIN} ${EMAIL}' < ./templates/playbook-install-nginx.yml.template > ./playbooks/install-nginx.yml
envsubst '${ANSIBLE_GROUP}' < ./templates/playbook-install-relay.yml.template > ./playbooks/install-relay.yml
envsubst '${ANSIBLE_GROUP}' < ./templates/playbook-install-status.yml.template > ./playbooks/install-status.yml
envsubst '${ANSIBLE_GROUP}' < ./templates/playbook-revert-relay.yml.template > ./playbooks/revert-relay.yml
envsubst '${ANSIBLE_GROUP}' < ./templates/playbook-update-book.yml.template > ./playbooks/update-book.yml
envsubst '${ANSIBLE_GROUP}' < ./templates/playbook-update-book-service.yml.template > ./playbooks/update-book-service.yml
envsubst '${ANSIBLE_GROUP}' < ./templates/playbook-update-jump.yml.template > ./playbooks/update-jump.yml
envsubst '${ANSIBLE_GROUP}' < ./templates/playbook-update-jump-service.yml.template > ./playbooks/update-jump-service.yml
envsubst '${ANSIBLE_GROUP}' < ./templates/playbook-update-nginx-conf.yml.template > ./playbooks/update-nginx-conf.yml
envsubst '${ANSIBLE_GROUP}' < ./templates/playbook-update-relay.yml.template > ./playbooks/update-relay.yml
envsubst '${ANSIBLE_GROUP}' < ./templates/playbook-update-status.yml.template > ./playbooks/update-status.yml
envsubst '${ANSIBLE_GROUP}' < ./templates/playbook-update-relay-service.yml.template > ./playbooks/update-relay-service.yml
envsubst '${ANSIBLE_GROUP}' < ./templates/playbook-update-static-contents.yml.template > ./playbooks/update-static-contents.yml


# Administration scripts
envsubst '${HTTPS_HOST}  ${SECRETS}' < ./templates/jump-get-stats.sh.template > ./jump/get-stats.sh
chmod +x ./jump/get-stats.sh

envsubst '${HTTPS_HOST}  ${SECRETS}' < ./templates/jump-check-access.sh.template > ./jump/check-access.sh
chmod +x ./jump/check-access.sh

envsubst '${HTTPS_HOST}  ${SECRETS} ${EXPT_SECRETS}' < ./templates/jump-login.sh.template > ./jump/login.sh
chmod +x ./jump/login.sh

mkdir -p ./relay
envsubst '${HTTPS_HOST}  ${SECRETS}' < ./templates/relay-get-stats.sh.template > ./relay/get-stats.sh
chmod +x ./relay/get-stats.sh



# Virtual experiments

# make tokens and access files for jump; relay
# these have to go inside the docker build context, hence putting in ./docker
rm -rf ./docker/autogenerated/virtual-experiments 
mkdir -p ./docker/autogenerated/virtual-experiments

for i in $(seq 0 $VE_NUM)
do
	num=$(printf "%02d" $i)
    expt="test${num}"
	# Jump token
	export JUMP_TOKEN_LIFETIME=$VE_LIFETIME
	export JUMP_TOKEN_ROLE=host
	export JUMP_TOKEN_SECRET=$JUMP_SECRET
	export JUMP_TOKEN_TOPIC=$expt
	export JUMP_TOKEN_CONNECTION_TYPE=connect
	export JUMP_TOKEN_AUDIENCE=$JUMP_AUDIENCE
	./bin/jump token > "./docker/autogenerated/virtual-experiments/jump-${JUMP_TOKEN_TOPIC}.token"

	# Jump access
	export  JUMP_HOST_ACCESS=${JUMP_AUDIENCE}${JUMP_BASE_PATH}/${JUMP_TOKEN_CONNECTION_TYPE}/${JUMP_TOKEN_TOPIC}
	echo $JUMP_HOST_ACCESS > "./docker/autogenerated/virtual-experiments/jump-${JUMP_TOKEN_TOPIC}.access"

	# Relay Token (data)
	
	export RELAY_TOKEN_LIFETIME=$VE_LIFETIME
	export RELAY_TOKEN_SCOPE_OTHER=expt
	export RELAY_TOKEN_SCOPE_READ=true
	export RELAY_TOKEN_SCOPE_WRITE=true
	export RELAY_TOKEN_SECRET=$RELAY_SECRET
	export RELAY_TOKEN_TOPIC="${expt}-st-data"
	export RELAY_TOKEN_AUDIENCE=$RELAY_AUDIENCE
	./bin/relay token > "./docker/autogenerated/virtual-experiments/relay-${RELAY_TOKEN_TOPIC}.token"

	# Relay access (data)
	export RELAY_ACCESS=${RELAY_TOKEN_AUDIENCE}/session/${RELAY_TOKEN_TOPIC}
	echo $RELAY_ACCESS > "./docker/autogenerated/virtual-experiments/relay-${RELAY_TOKEN_TOPIC}.access"

	
	# Relay token (video)
	export RELAY_TOKEN_LIFETIME=$VE_LIFETIME
	export RELAY_TOKEN_SCOPE_OTHER=expt
	export RELAY_TOKEN_SCOPE_READ=true
	export RELAY_TOKEN_SCOPE_WRITE=true
	export RELAY_TOKEN_SECRET=$RELAY_SECRET
	export RELAY_TOKEN_TOPIC="${expt}-st-video"
	export RELAY_TOKEN_AUDIENCE=$RELAY_AUDIENCE
	./bin/relay token > "./docker/autogenerated/virtual-experiments/relay-${RELAY_TOKEN_TOPIC}.token"
	
	# Relay access (video)
	export RELAY_ACCESS=${RELAY_TOKEN_AUDIENCE}/session/${RELAY_TOKEN_TOPIC}
	echo $RELAY_ACCESS > "./docker/autogenerated/virtual-experiments/relay-${RELAY_TOKEN_TOPIC}.access"

done

# make the session-rules script
envsubst '${VE_NUM}' < ./templates/relay-rules.sh.template > ./docker/autogenerated/relay-rules.sh
chmod +x ./docker/autogenerated/relay-rules.sh

# configure the run.sh script for the docker container
envsubst '${VE_NUM} ${VE_LIFETIME}' < ./templates/virtual-experiments.sh.template > ./docker/autogenerated/virtual-experiments.sh
chmod +x ./docker/autogenerated/virtual-experiments.sh


# Make the booking manifest (demo version)
envsubst '${RELAY_AUDIENCE}' < ./templates/book-manifest.yaml.template > ./book/manifest.yaml

# booking scripts
envsubst '${SECRETS} ${BOOK_AUDIENCE} ${DOMAIN} ${INSTANCE_PATH} ${BOOK_BASE_PATH}' < ./templates/book-upload.sh.template > ./book/upload.sh
chmod +x ./book/upload.sh



